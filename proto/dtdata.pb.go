// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dtdata.proto

package dtdatapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DTDataType - dtdata type
type DTDataType int32

const (
	DTDataType_DTDT_GAMEDAYREPORT DTDataType = 0
)

var DTDataType_name = map[int32]string{
	0: "DTDT_GAMEDAYREPORT",
}
var DTDataType_value = map[string]int32{
	"DTDT_GAMEDAYREPORT": 0,
}

func (x DTDataType) String() string {
	return proto.EnumName(DTDataType_name, int32(x))
}
func (DTDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dtdata_a190a4dcffbe8c99, []int{0}
}

// DTDataServCtrlInfo - DTData server ctrl info
type DTDataServCtrlInfo struct {
	Type                 DTDataType `protobuf:"varint,1,opt,name=type,proto3,enum=dtdatapb.DTDataType" json:"type,omitempty"`
	StartTime            string     `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              string     `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Env                  string     `protobuf:"bytes,4,opt,name=env,proto3" json:"env,omitempty"`
	Currency             string     `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	ScaleMoney           int32      `protobuf:"varint,6,opt,name=scaleMoney,proto3" json:"scaleMoney,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DTDataServCtrlInfo) Reset()         { *m = DTDataServCtrlInfo{} }
func (m *DTDataServCtrlInfo) String() string { return proto.CompactTextString(m) }
func (*DTDataServCtrlInfo) ProtoMessage()    {}
func (*DTDataServCtrlInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dtdata_a190a4dcffbe8c99, []int{0}
}
func (m *DTDataServCtrlInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTDataServCtrlInfo.Unmarshal(m, b)
}
func (m *DTDataServCtrlInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTDataServCtrlInfo.Marshal(b, m, deterministic)
}
func (dst *DTDataServCtrlInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTDataServCtrlInfo.Merge(dst, src)
}
func (m *DTDataServCtrlInfo) XXX_Size() int {
	return xxx_messageInfo_DTDataServCtrlInfo.Size(m)
}
func (m *DTDataServCtrlInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DTDataServCtrlInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DTDataServCtrlInfo proto.InternalMessageInfo

func (m *DTDataServCtrlInfo) GetType() DTDataType {
	if m != nil {
		return m.Type
	}
	return DTDataType_DTDT_GAMEDAYREPORT
}

func (m *DTDataServCtrlInfo) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DTDataServCtrlInfo) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *DTDataServCtrlInfo) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *DTDataServCtrlInfo) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *DTDataServCtrlInfo) GetScaleMoney() int32 {
	if m != nil {
		return m.ScaleMoney
	}
	return 0
}

// DTDataServCtrlReply - DTData server ctrl reply
type DTDataServCtrlReply struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTDataServCtrlReply) Reset()         { *m = DTDataServCtrlReply{} }
func (m *DTDataServCtrlReply) String() string { return proto.CompactTextString(m) }
func (*DTDataServCtrlReply) ProtoMessage()    {}
func (*DTDataServCtrlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dtdata_a190a4dcffbe8c99, []int{1}
}
func (m *DTDataServCtrlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTDataServCtrlReply.Unmarshal(m, b)
}
func (m *DTDataServCtrlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTDataServCtrlReply.Marshal(b, m, deterministic)
}
func (dst *DTDataServCtrlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTDataServCtrlReply.Merge(dst, src)
}
func (m *DTDataServCtrlReply) XXX_Size() int {
	return xxx_messageInfo_DTDataServCtrlReply.Size(m)
}
func (m *DTDataServCtrlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DTDataServCtrlReply.DiscardUnknown(m)
}

var xxx_messageInfo_DTDataServCtrlReply proto.InternalMessageInfo

func (m *DTDataServCtrlReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// DTGameReport - dt game report
type DTGameReport struct {
	Rtp                  float32             `protobuf:"fixed32,1,opt,name=rtp,proto3" json:"rtp,omitempty"`
	TotalBet             float32             `protobuf:"fixed32,2,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	TotalWin             float32             `protobuf:"fixed32,3,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	SpinNums             int64               `protobuf:"varint,4,opt,name=spinNums,proto3" json:"spinNums,omitempty"`
	CurrencyNums         int32               `protobuf:"varint,5,opt,name=currencyNums,proto3" json:"currencyNums,omitempty"`
	MainCurrency         string              `protobuf:"bytes,6,opt,name=mainCurrency,proto3" json:"mainCurrency,omitempty"`
	BusinessNums         int32               `protobuf:"varint,7,opt,name=businessNums,proto3" json:"businessNums,omitempty"`
	Businessid           []string            `protobuf:"bytes,20,rep,name=businessid,proto3" json:"businessid,omitempty"`
	BusinessReport       []*DTBusinessReport `protobuf:"bytes,21,rep,name=businessReport,proto3" json:"businessReport,omitempty"`
	GameCode             string              `protobuf:"bytes,100,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DTGameReport) Reset()         { *m = DTGameReport{} }
func (m *DTGameReport) String() string { return proto.CompactTextString(m) }
func (*DTGameReport) ProtoMessage()    {}
func (*DTGameReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_dtdata_a190a4dcffbe8c99, []int{2}
}
func (m *DTGameReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTGameReport.Unmarshal(m, b)
}
func (m *DTGameReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTGameReport.Marshal(b, m, deterministic)
}
func (dst *DTGameReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTGameReport.Merge(dst, src)
}
func (m *DTGameReport) XXX_Size() int {
	return xxx_messageInfo_DTGameReport.Size(m)
}
func (m *DTGameReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DTGameReport.DiscardUnknown(m)
}

var xxx_messageInfo_DTGameReport proto.InternalMessageInfo

func (m *DTGameReport) GetRtp() float32 {
	if m != nil {
		return m.Rtp
	}
	return 0
}

func (m *DTGameReport) GetTotalBet() float32 {
	if m != nil {
		return m.TotalBet
	}
	return 0
}

func (m *DTGameReport) GetTotalWin() float32 {
	if m != nil {
		return m.TotalWin
	}
	return 0
}

func (m *DTGameReport) GetSpinNums() int64 {
	if m != nil {
		return m.SpinNums
	}
	return 0
}

func (m *DTGameReport) GetCurrencyNums() int32 {
	if m != nil {
		return m.CurrencyNums
	}
	return 0
}

func (m *DTGameReport) GetMainCurrency() string {
	if m != nil {
		return m.MainCurrency
	}
	return ""
}

func (m *DTGameReport) GetBusinessNums() int32 {
	if m != nil {
		return m.BusinessNums
	}
	return 0
}

func (m *DTGameReport) GetBusinessid() []string {
	if m != nil {
		return m.Businessid
	}
	return nil
}

func (m *DTGameReport) GetBusinessReport() []*DTBusinessReport {
	if m != nil {
		return m.BusinessReport
	}
	return nil
}

func (m *DTGameReport) GetGameCode() string {
	if m != nil {
		return m.GameCode
	}
	return ""
}

// DTBusinessReport - dt business report
type DTBusinessReport struct {
	Rtp                  float32         `protobuf:"fixed32,1,opt,name=rtp,proto3" json:"rtp,omitempty"`
	TotalBet             float32         `protobuf:"fixed32,2,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	TotalWin             float32         `protobuf:"fixed32,3,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	SpinNums             int64           `protobuf:"varint,4,opt,name=spinNums,proto3" json:"spinNums,omitempty"`
	CurrencyNums         int32           `protobuf:"varint,5,opt,name=currencyNums,proto3" json:"currencyNums,omitempty"`
	GameNums             int32           `protobuf:"varint,6,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
	MainCurrency         string          `protobuf:"bytes,7,opt,name=mainCurrency,proto3" json:"mainCurrency,omitempty"`
	Gamecode             []string        `protobuf:"bytes,20,rep,name=gamecode,proto3" json:"gamecode,omitempty"`
	GameReport           []*DTGameReport `protobuf:"bytes,21,rep,name=gameReport,proto3" json:"gameReport,omitempty"`
	BusinessID           string          `protobuf:"bytes,100,opt,name=businessID,proto3" json:"businessID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DTBusinessReport) Reset()         { *m = DTBusinessReport{} }
func (m *DTBusinessReport) String() string { return proto.CompactTextString(m) }
func (*DTBusinessReport) ProtoMessage()    {}
func (*DTBusinessReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_dtdata_a190a4dcffbe8c99, []int{3}
}
func (m *DTBusinessReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTBusinessReport.Unmarshal(m, b)
}
func (m *DTBusinessReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTBusinessReport.Marshal(b, m, deterministic)
}
func (dst *DTBusinessReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTBusinessReport.Merge(dst, src)
}
func (m *DTBusinessReport) XXX_Size() int {
	return xxx_messageInfo_DTBusinessReport.Size(m)
}
func (m *DTBusinessReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DTBusinessReport.DiscardUnknown(m)
}

var xxx_messageInfo_DTBusinessReport proto.InternalMessageInfo

func (m *DTBusinessReport) GetRtp() float32 {
	if m != nil {
		return m.Rtp
	}
	return 0
}

func (m *DTBusinessReport) GetTotalBet() float32 {
	if m != nil {
		return m.TotalBet
	}
	return 0
}

func (m *DTBusinessReport) GetTotalWin() float32 {
	if m != nil {
		return m.TotalWin
	}
	return 0
}

func (m *DTBusinessReport) GetSpinNums() int64 {
	if m != nil {
		return m.SpinNums
	}
	return 0
}

func (m *DTBusinessReport) GetCurrencyNums() int32 {
	if m != nil {
		return m.CurrencyNums
	}
	return 0
}

func (m *DTBusinessReport) GetGameNums() int32 {
	if m != nil {
		return m.GameNums
	}
	return 0
}

func (m *DTBusinessReport) GetMainCurrency() string {
	if m != nil {
		return m.MainCurrency
	}
	return ""
}

func (m *DTBusinessReport) GetGamecode() []string {
	if m != nil {
		return m.Gamecode
	}
	return nil
}

func (m *DTBusinessReport) GetGameReport() []*DTGameReport {
	if m != nil {
		return m.GameReport
	}
	return nil
}

func (m *DTBusinessReport) GetBusinessID() string {
	if m != nil {
		return m.BusinessID
	}
	return ""
}

// DTReport - dt report
type DTReport struct {
	Rtp                  float32             `protobuf:"fixed32,1,opt,name=rtp,proto3" json:"rtp,omitempty"`
	TotalBet             float32             `protobuf:"fixed32,2,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	TotalWin             float32             `protobuf:"fixed32,3,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	SpinNums             int64               `protobuf:"varint,4,opt,name=spinNums,proto3" json:"spinNums,omitempty"`
	CurrencyNums         int32               `protobuf:"varint,5,opt,name=currencyNums,proto3" json:"currencyNums,omitempty"`
	GameNums             int32               `protobuf:"varint,6,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
	MainCurrency         string              `protobuf:"bytes,7,opt,name=mainCurrency,proto3" json:"mainCurrency,omitempty"`
	BusinessNums         int32               `protobuf:"varint,8,opt,name=businessNums,proto3" json:"businessNums,omitempty"`
	TopGames             []*DTGameReport     `protobuf:"bytes,100,rep,name=topGames,proto3" json:"topGames,omitempty"`
	TopBusiness          []*DTBusinessReport `protobuf:"bytes,101,rep,name=topBusiness,proto3" json:"topBusiness,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DTReport) Reset()         { *m = DTReport{} }
func (m *DTReport) String() string { return proto.CompactTextString(m) }
func (*DTReport) ProtoMessage()    {}
func (*DTReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_dtdata_a190a4dcffbe8c99, []int{4}
}
func (m *DTReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTReport.Unmarshal(m, b)
}
func (m *DTReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTReport.Marshal(b, m, deterministic)
}
func (dst *DTReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTReport.Merge(dst, src)
}
func (m *DTReport) XXX_Size() int {
	return xxx_messageInfo_DTReport.Size(m)
}
func (m *DTReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DTReport.DiscardUnknown(m)
}

var xxx_messageInfo_DTReport proto.InternalMessageInfo

func (m *DTReport) GetRtp() float32 {
	if m != nil {
		return m.Rtp
	}
	return 0
}

func (m *DTReport) GetTotalBet() float32 {
	if m != nil {
		return m.TotalBet
	}
	return 0
}

func (m *DTReport) GetTotalWin() float32 {
	if m != nil {
		return m.TotalWin
	}
	return 0
}

func (m *DTReport) GetSpinNums() int64 {
	if m != nil {
		return m.SpinNums
	}
	return 0
}

func (m *DTReport) GetCurrencyNums() int32 {
	if m != nil {
		return m.CurrencyNums
	}
	return 0
}

func (m *DTReport) GetGameNums() int32 {
	if m != nil {
		return m.GameNums
	}
	return 0
}

func (m *DTReport) GetMainCurrency() string {
	if m != nil {
		return m.MainCurrency
	}
	return ""
}

func (m *DTReport) GetBusinessNums() int32 {
	if m != nil {
		return m.BusinessNums
	}
	return 0
}

func (m *DTReport) GetTopGames() []*DTGameReport {
	if m != nil {
		return m.TopGames
	}
	return nil
}

func (m *DTReport) GetTopBusiness() []*DTBusinessReport {
	if m != nil {
		return m.TopBusiness
	}
	return nil
}

func init() {
	proto.RegisterType((*DTDataServCtrlInfo)(nil), "dtdatapb.DTDataServCtrlInfo")
	proto.RegisterType((*DTDataServCtrlReply)(nil), "dtdatapb.DTDataServCtrlReply")
	proto.RegisterType((*DTGameReport)(nil), "dtdatapb.DTGameReport")
	proto.RegisterType((*DTBusinessReport)(nil), "dtdatapb.DTBusinessReport")
	proto.RegisterType((*DTReport)(nil), "dtdatapb.DTReport")
	proto.RegisterEnum("dtdatapb.DTDataType", DTDataType_name, DTDataType_value)
}

func init() { proto.RegisterFile("dtdata.proto", fileDescriptor_dtdata_a190a4dcffbe8c99) }

var fileDescriptor_dtdata_a190a4dcffbe8c99 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0xcd, 0x8a, 0xdb, 0x3c,
	0x14, 0xfd, 0x6c, 0x4f, 0xfe, 0xee, 0x84, 0x21, 0xe8, 0x4b, 0x07, 0x31, 0x94, 0x62, 0x4c, 0x17,
	0xa6, 0x85, 0x2c, 0x52, 0xe8, 0xaa, 0x9b, 0x49, 0x3c, 0x0c, 0xb3, 0x98, 0xb6, 0xa8, 0x86, 0xa1,
	0xab, 0xa2, 0xc4, 0xb7, 0x83, 0x69, 0x2c, 0x0b, 0x5b, 0x19, 0xf0, 0xfb, 0xf5, 0x01, 0xfa, 0x08,
	0x5d, 0xf7, 0x29, 0x8a, 0xe4, 0xc8, 0x51, 0xd2, 0xa1, 0xdd, 0x96, 0xee, 0x74, 0xce, 0x3d, 0x12,
	0xf7, 0x9c, 0x7b, 0x11, 0x8c, 0x33, 0x95, 0x71, 0xc5, 0x67, 0xb2, 0x2a, 0x55, 0x49, 0x86, 0x2d,
	0x92, 0xab, 0xe8, 0xab, 0x07, 0x24, 0x49, 0x13, 0xae, 0xf8, 0x07, 0xac, 0x1e, 0x96, 0xaa, 0xda,
	0xdc, 0x88, 0xcf, 0x25, 0x89, 0xe1, 0x44, 0x35, 0x12, 0xa9, 0x17, 0x7a, 0xf1, 0xd9, 0x7c, 0x3a,
	0xb3, 0xfa, 0x59, 0xab, 0x4d, 0x1b, 0x89, 0xcc, 0x28, 0xc8, 0x53, 0x18, 0xd5, 0x8a, 0x57, 0x2a,
	0xcd, 0x0b, 0xa4, 0x7e, 0xe8, 0xc5, 0x23, 0xb6, 0x27, 0x08, 0x85, 0x01, 0x8a, 0xcc, 0xd4, 0x02,
	0x53, 0xb3, 0x90, 0x4c, 0x20, 0x40, 0xf1, 0x40, 0x4f, 0x0c, 0xab, 0x8f, 0xe4, 0x02, 0x86, 0xeb,
	0x6d, 0x55, 0xa1, 0x58, 0x37, 0xb4, 0x67, 0xe8, 0x0e, 0x93, 0x67, 0x00, 0xf5, 0x9a, 0x6f, 0xf0,
	0xb6, 0x14, 0xd8, 0xd0, 0x7e, 0xe8, 0xc5, 0x3d, 0xe6, 0x30, 0xd1, 0x4b, 0xf8, 0xff, 0xd0, 0x05,
	0x43, 0xb9, 0x69, 0xc8, 0x14, 0x7a, 0xaa, 0xfc, 0x82, 0xc2, 0xf8, 0x18, 0xb1, 0x16, 0x44, 0xdf,
	0x7d, 0x18, 0x27, 0xe9, 0x35, 0x2f, 0x90, 0xa1, 0x2c, 0x2b, 0xa5, 0x7b, 0xa9, 0x94, 0x34, 0x22,
	0x9f, 0xe9, 0xa3, 0xee, 0x45, 0x95, 0x8a, 0x6f, 0x16, 0xa8, 0x8c, 0x29, 0x9f, 0x75, 0xb8, 0xab,
	0xdd, 0xe5, 0xc2, 0x98, 0xb2, 0xb5, 0xbb, 0x5c, 0xe8, 0x5a, 0x2d, 0x73, 0xf1, 0x76, 0x5b, 0xd4,
	0xc6, 0x5a, 0xc0, 0x3a, 0x4c, 0x22, 0x18, 0x5b, 0x3f, 0xa6, 0xde, 0x33, 0x2e, 0x0e, 0x38, 0xad,
	0x29, 0x78, 0x2e, 0x96, 0x36, 0x87, 0xbe, 0xe9, 0xfb, 0x80, 0xd3, 0x9a, 0xd5, 0xb6, 0xce, 0x05,
	0xd6, 0xb5, 0x79, 0x67, 0xd0, 0xbe, 0xe3, 0x72, 0x3a, 0x2f, 0x8b, 0xf3, 0x8c, 0x4e, 0xc3, 0x20,
	0x1e, 0x31, 0x87, 0x21, 0x0b, 0x38, 0xb3, 0xa8, 0xcd, 0x80, 0x3e, 0x09, 0x83, 0xf8, 0x74, 0x7e,
	0xe1, 0x4e, 0x7a, 0x71, 0xa0, 0x60, 0x47, 0x37, 0xb4, 0xd7, 0x7b, 0x5e, 0xe0, 0xb2, 0xcc, 0x90,
	0x66, 0xed, 0xbc, 0x2c, 0x8e, 0xbe, 0xf9, 0x30, 0x39, 0x7e, 0xe0, 0x2f, 0x8a, 0x79, 0xd7, 0xba,
	0xa9, 0xb7, 0xcb, 0xd4, 0xe1, 0x5f, 0x46, 0x30, 0x78, 0x64, 0x04, 0xbb, 0xfb, 0x6b, 0x6d, 0xbd,
	0x0d, 0xb7, 0xc3, 0xe4, 0x35, 0xc0, 0x7d, 0xb7, 0x5a, 0xbb, 0x58, 0xcf, 0xdd, 0x58, 0xf7, 0x8b,
	0xc7, 0x1c, 0xa5, 0x3b, 0xb2, 0x9b, 0x64, 0x17, 0xa8, 0xc3, 0x44, 0x3f, 0x7c, 0x18, 0x26, 0xe9,
	0x3f, 0x17, 0xe5, 0xf1, 0x36, 0x0f, 0x1f, 0xd9, 0xe6, 0xb9, 0xee, 0x5f, 0xea, 0xdc, 0x6a, 0x9a,
	0xfd, 0x36, 0xd0, 0x4e, 0x47, 0xde, 0xc0, 0xa9, 0x2a, 0xa5, 0xdd, 0x40, 0x8a, 0x7f, 0x5c, 0x6f,
	0x57, 0xfe, 0xe2, 0x39, 0xc0, 0xfe, 0xa7, 0x23, 0xe7, 0xe6, 0x8f, 0x4c, 0x3f, 0x5d, 0x5f, 0xde,
	0x5e, 0x25, 0x97, 0x1f, 0xd9, 0xd5, 0xfb, 0x77, 0x2c, 0x9d, 0xfc, 0xb7, 0xea, 0x9b, 0xdf, 0xf4,
	0xd5, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x8c, 0x0b, 0x63, 0x5d, 0x05, 0x00, 0x00,
}
